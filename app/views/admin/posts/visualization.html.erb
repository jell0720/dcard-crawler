<%= render 'admin/shared/header' %>
<div class="container my-2">
  <div class="btn-toolbar">
    <%= link_to admin_post_path, class: 'btn btn-sm btn-outline-secondary mr-auto' do %>
      <i class="fas fa-redo"></i> Back
    <% end %>
    <%= render 'tasks_btn', post: @post %>
  </div>
  <div class="mt-2">
    <% if @kmeans %>
      <%= form_tag visualization_admin_post_path(@post), method: :get, class: "form-inline" do %>
        <div class="form-group mr-2">
          <label class="mr-1">K :</label>
          <%= number_field_tag :k, params[:k], class: "form-control" %>
        </div>
        <button type="submit" class="btn btn-sm btn-outline-secondary">Cluster</button>
      <% end %>
      <p class="text-muted small">Silhouette score: <%= @kmeans.silhouette.round(5) %></p>
    <% else %>
      <p>
        You need to
        <%= link_to compute_embedding_admin_post_path(@post), method: :post, remote: true, class: 'btn btn-sm btn-outline-warning', id: "compute-embedding-post-#{@post.dcard_id}-btn" do %>
          <i class="fas fa-vector-square"></i> Compute Embedding
        <% end %>
        first
      </p>
    <% end %>
    <% unless @post.sentiment.present? %>
      <p>
        You need to
        <%= link_to sentiment_analysis_admin_post_path(@post), method: :post, remote: true, class: 'btn btn-sm btn-outline-warning', id: "sentiment-analysis-post-#{@post.dcard_id}-btn" do %>
          <i class="fas fa-smile"></i> Sentiment Analysis
        <% end %>
        first
      </p>
    <% end %>
  </div>
  <hr>
  <div>
    post analysis here
  </div>
  <hr>
  <div>
    <div class="mt-2">
      <input type="text" id="floor-range" name="floor-range">
    </div>
    <div class="row mt-2">
      <div class="col-12 col-md-7">
        <div id="graph-container">
          <div id="graph"></div>
        </div>
        <div class="btn-toolbar mt-2">
          <label>Color by</label>
          <div class="btn-group btn-group-toggle ml-1 mr-2" data-toggle="buttons">
            <div class="btn btn-sm btn-outline-secondary active" id="color-by-gender-btn"><input type="radio">Gender</div>
            <div class="btn btn-sm btn-outline-secondary" id="color-by-sentiment-btn"><input type="radio">Sentiment</div>
            <div class="btn btn-sm btn-outline-secondary" id="color-by-cluster-btn"><input type="radio">Cluster</div>
          </div>
          <label>Size by</label>
          <div class="btn-group btn-group-toggle ml-1 mr-2" data-toggle="buttons">
            <div class="btn btn-sm btn-outline-secondary active" id="size-by-like-btn"><input type="radio">Like</div>
            <div class="btn btn-sm btn-outline-secondary" id="size-by-length-btn"><input type="radio">Length</div>
          </div>
        </div>
      </div>
      <div class="col-12 col-md-5">
        <div id="node-html"></div>
      </div>
    </div>
  </div>
</div>
<script>
  var data = <%= sanitize force_graph_data_formater(@post, @comments).to_json %>
  var clusters = <%= sanitize @clusters.to_json %> || []
  var Graph = ForceGraph3D()
  var graph = document.getElementById('graph')
  var graphContainer = document.getElementById('graph-container')
  var nodeHtml = document.getElementById('node-html')
  
  function adjustGraphSize() {
    Graph.width(graphContainer.clientWidth).height(window.innerHeight - 100)
  }
  
  function removeChildren(dom) {
    while (dom.firstChild) { dom.removeChild(dom.firstChild) }
  }
  
  function showNode(node) {
    removeChildren(nodeHtml)
    nodeHtml.insertAdjacentHTML('afterbegin', node.html);
  }
  
  // Draw graph
  Graph(document.getElementById('graph'))
    .graphData(data)
    .backgroundColor('#f8f9fa')
    .nodeVal('valLike')
    .nodeColor('genderColor')
    .onNodeClick(node => showNode(node))
    .linkWidth(2)
  adjustGraphSize()
  window.addEventListener('resize', () => adjustGraphSize())
  
  // Button to controll graph
  document.getElementById('color-by-gender-btn').addEventListener('click', () => Graph.nodeColor('genderColor'))
  document.getElementById('color-by-sentiment-btn').addEventListener('click', () => Graph.nodeColor('sentimentColor'))
  document.getElementById('color-by-cluster-btn').addEventListener('click', () => Graph.nodeColor('clusterColor'))
  document.getElementById('size-by-like-btn').addEventListener('click', () => Graph.nodeVal('valLike'))
  document.getElementById('size-by-length-btn').addEventListener('click', () => Graph.nodeVal('valLength'))
  
  function randomColor() {
    let r = (Math.random() * 255) | 0
    let g = (Math.random() * 255) | 0
    let b = (Math.random() * 255) | 0
    return `rgb(${r}, ${g}, ${b})`
  }
  
  // Add clusters colors to nodes
  document.getElementById('color-by-cluster-btn').addEventListener('click', () => {
    clusters.forEach(cluster => {
      let color = randomColor()
      cluster.forEach(point => {
        let node = data.nodes.find(node => node.floor === point)
        node["clusterColor"] = color
      })
    })
  })
  
  function showNodesInRange(min, max) {
    let { nodes, links } = data
    // Remove links attached to node
    links = links.filter(l => {
      return l.source.floor >= min &&
        l.source.floor <= max &&
        l.target.floor >= min &&
        l.target.floor <= max
    })
    // Remove nodes
    nodes = nodes.filter(n => n.floor >= min && n.floor <= max)
    Graph.graphData({ nodes, links })
    return {nodes, links}
  }
  
  // ionRangeSlider for display nodes in specific floors
  $("#floor-range").ionRangeSlider({
    type: "double",
    grid: true,
    min: 0,
    max: data['nodes'][data['nodes'].length-1].floor,
    from: 0,
    to: data['nodes'][data['nodes'].length-1].floor,
    prefix: "B",
    onFinish: function (data) {
      console.log(`from ${data.from}`)
      console.log(`to ${data.to}`)
      showNodesInRange(data.from, data.to)
    }
  })
</script>
<style>
  img {
    max-width: 100%;
    max-height: 200px;
  }
</style>
